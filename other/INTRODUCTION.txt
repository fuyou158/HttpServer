案例介绍和分析

B/S架构模式  
访问服务器IP地址+端口地址+路径，即可打开对应的目录  
例如：  
    服务器端：./server 8888 ~/test/  
    客户端：浏览器输入服务器端的IP地址+端口  
    就能进入到服务器端给出的目录

客户端：浏览器
    通过浏览器访问服务器：
        - 访问方式：服务器的IP地址:端口
        - 应用层协议使用：http，数据需要在浏览器端使用该连接进行包装
        - 响应的消息的处理也是浏览器完成的，程序员不需要管
        - 客户端通过url访问服务器资源：http://192.168.1.101:8989/
            - 访问服务器提供的资源目录的根目录（是/home/robin/luffy而不是服务器的根目录）

    服务器端：提供服务器，让客户端访问
        - 支持多客户端访问，使用I/O多路转接epoll
        - 客户端发送给的请求消息是基于http的，因此服务器需要能够解析http请求
        - 服务器回复客户端数据，使用http协议封装回复的数据 -> http响应
        - 服务器端需要提供一个资源目录，目录终端文件可以供客户端访问，客户端访问的文件没有在资源目录中，就不能访问了
            - 假设服务器提供：/home/robin/luffy目录

服务器端的伪代码实现
int main(){
    // 1.创建监听的套接字
    socket();

    // 2.绑定
    bind();

    // 3.设置监听
    listen();

    // 4.创建epoll模型
    epoll_create();
    epoll_ctl();

    // 5.检测
    while(1){
        epoll_wait();
        // 监听的文件描述符
        accept();
        // 通信的文件描述符
        // 接收数据->http请求消息
    }
    return 0;
}

// 基于边沿非阻塞模型接收数据
int recvAndParseHTTP(){
    // 循环接收数据
    // 解析HTTP请求消息
    // http请求两种：get / post
    // 只处理get请求，浏览器向服务器请求访问的文件都是静态资源，因此使用get就可以
    // 判断是不是get请求 ==> 在请求行中的第一部分
    // 客户端向服务器端请求的静态资源是什么 ==> 在请求行中的第二部分
        - 文件 -> 读文件内容
        - 目录 -> 遍历目录
    // 将文件内容或者目录内容打包到http响应协议中
    // 将整条协议发送回客户端即可
}